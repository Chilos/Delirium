// <auto-generated />
using System;
using System.Collections.Generic;
using Delirium.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Delirium.Persistence.Migrations
{
    [DbContext(typeof(DeliriumDbContext))]
    [Migration("20220625163448_workout")]
    partial class workout
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Delirium.Domain.ExerciseTemplate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("DefaultSetsCount")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<List<string>>("ImageUrls")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("ExerciseTemplates");
                });

            modelBuilder.Entity("Delirium.Domain.Measurement", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("Measurements");
                });

            modelBuilder.Entity("Delirium.Domain.MeasurementValue", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<long>("MeasurementId")
                        .HasColumnType("bigint");

                    b.Property<Guid>("SetId")
                        .HasColumnType("uuid");

                    b.Property<double>("Value")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("MeasurementId");

                    b.HasIndex("SetId");

                    b.ToTable("MeasurementValues");
                });

            modelBuilder.Entity("Delirium.Domain.Set", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ExerciseId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("WorkoutId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ExerciseId");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("WorkoutId");

                    b.ToTable("Sets");
                });

            modelBuilder.Entity("Delirium.Domain.Tag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("Delirium.Domain.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Delirium.Domain.Workout", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<int>("State")
                        .HasColumnType("integer");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("Workouts");
                });

            modelBuilder.Entity("ExerciseTemplateMeasurement", b =>
                {
                    b.Property<Guid>("ExerciseTemplatesId")
                        .HasColumnType("uuid");

                    b.Property<long>("ParametersId")
                        .HasColumnType("bigint");

                    b.HasKey("ExerciseTemplatesId", "ParametersId");

                    b.HasIndex("ParametersId");

                    b.ToTable("ExerciseTemplateMeasurement");
                });

            modelBuilder.Entity("ExerciseTemplateTag", b =>
                {
                    b.Property<Guid>("ExerciseTemplatesId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TagsId")
                        .HasColumnType("uuid");

                    b.HasKey("ExerciseTemplatesId", "TagsId");

                    b.HasIndex("TagsId");

                    b.ToTable("ExerciseTemplateTag");
                });

            modelBuilder.Entity("ExerciseTemplateWorkout", b =>
                {
                    b.Property<Guid>("ExercisesId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("WorkoutsId")
                        .HasColumnType("uuid");

                    b.HasKey("ExercisesId", "WorkoutsId");

                    b.HasIndex("WorkoutsId");

                    b.ToTable("ExerciseTemplateWorkout");
                });

            modelBuilder.Entity("Delirium.Domain.MeasurementValue", b =>
                {
                    b.HasOne("Delirium.Domain.Measurement", "Measurement")
                        .WithMany("Values")
                        .HasForeignKey("MeasurementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Delirium.Domain.Set", "Set")
                        .WithMany("Values")
                        .HasForeignKey("SetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Measurement");

                    b.Navigation("Set");
                });

            modelBuilder.Entity("Delirium.Domain.Set", b =>
                {
                    b.HasOne("Delirium.Domain.ExerciseTemplate", "Exercise")
                        .WithMany("Sets")
                        .HasForeignKey("ExerciseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Delirium.Domain.Workout", "Workout")
                        .WithMany("Sets")
                        .HasForeignKey("WorkoutId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exercise");

                    b.Navigation("Workout");
                });

            modelBuilder.Entity("ExerciseTemplateMeasurement", b =>
                {
                    b.HasOne("Delirium.Domain.ExerciseTemplate", null)
                        .WithMany()
                        .HasForeignKey("ExerciseTemplatesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Delirium.Domain.Measurement", null)
                        .WithMany()
                        .HasForeignKey("ParametersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ExerciseTemplateTag", b =>
                {
                    b.HasOne("Delirium.Domain.ExerciseTemplate", null)
                        .WithMany()
                        .HasForeignKey("ExerciseTemplatesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Delirium.Domain.Tag", null)
                        .WithMany()
                        .HasForeignKey("TagsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ExerciseTemplateWorkout", b =>
                {
                    b.HasOne("Delirium.Domain.ExerciseTemplate", null)
                        .WithMany()
                        .HasForeignKey("ExercisesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Delirium.Domain.Workout", null)
                        .WithMany()
                        .HasForeignKey("WorkoutsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Delirium.Domain.ExerciseTemplate", b =>
                {
                    b.Navigation("Sets");
                });

            modelBuilder.Entity("Delirium.Domain.Measurement", b =>
                {
                    b.Navigation("Values");
                });

            modelBuilder.Entity("Delirium.Domain.Set", b =>
                {
                    b.Navigation("Values");
                });

            modelBuilder.Entity("Delirium.Domain.Workout", b =>
                {
                    b.Navigation("Sets");
                });
#pragma warning restore 612, 618
        }
    }
}
